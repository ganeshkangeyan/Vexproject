{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\ntouchled TouchLED2 = touchled(PORT2);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ------------------------------------------------------------------------------\n//\n//    Project:           Detecting Acceleration\n//    Description:       This project will show how to use the Brain's Inertial\n//                       Sensor to detect acceleration along the X, Y, and\n//                       Z-axes to then display either red, green or blue on the\n//                       TouchLED depending on which way the BaseBot is tilted.\n//    Brain Supported:   2nd generation\n//    Configuration:     BaseBot (Drivetrain 2-motor, Inertial)\n//                       Left Motor in Port 1\n//                       Right Motor in Port 6\n//                       TouchLED in Port 2\n//\n// ------------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n  TouchLED2.setBrightness(100);\n\n  // Use a while loop to keep checking\n  // the Inertial Sensor's acceleration along the X, Y, and Z-axes\n  while (true) {\n    if (BrainInertial.acceleration(xaxis) < -0.5) {\n      // Tilt the front of the BaseBot downwards - the TouchLED will be set to red\n      TouchLED2.setColor(red);\n    } else if (BrainInertial.acceleration(yaxis) < -0.5) {\n      // Tilt the BaseBot on the right side - the TouchLED will be set to green\n      TouchLED2.setColor(green);\n    } else if (BrainInertial.acceleration(zaxis) < -0.5) {\n      // Tilt the BaseBot back to the original position - the TouchLED will be set to blue\n      TouchLED2.setColor(blue);\n    } else {\n      // Tilt the front of the BaseBot backwards - the TouchLED will turn off\n      TouchLED2.setColor(colorType::none);\n    }\n  }\n}","textLanguage":"cpp","robotConfig":[{"port":[1,6],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[2],"name":"TouchLED2","customName":false,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.60.0","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":""},"target":"Physical"}